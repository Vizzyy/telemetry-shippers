global:
  domain: ""
  defaultApplicationName: "default"
  defaultSubsystemName: "nodes"

  # Old endpoint based configuration, 
  # please use domain instead.
  traces:
    endpoint: ""
  metrics:
    endpoint: ""
  logs:
    endpoint: ""


opentelemetry-collector:
  mode: daemonset
  hostNetwork: true
  dnsPolicy: "ClusterFirstWithHostNet"
  fullnameOverride: otel-coralogix
  clusterRole:
    name: "otel-coralogix"
    clusterRoleBinding:
      name: "otel-coralogix"
  presets:
    logsCollection:
      enabled: true
      storeCheckpoints: true
    kubernetesAttributes:
      enabled: true
    hostMetrics:
      enabled: true
    kubeletMetrics:
      enabled: true

  extraEnvs:
  - name: CORALOGIX_PRIVATE_KEY
    valueFrom:
      secretKeyRef:
        name: coralogix-keys
        key: PRIVATE_KEY
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.node.name=$(K8S_NODE_NAME)"
  - name: KUBE_NODE_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: spec.nodeName
  config:
    extensions:
      zpages:
        endpoint: localhost:55679
      pprof:
        endpoint: localhost:1777
    exporters:
      coralogix:
        timeout: "30s"
        private_key: "${CORALOGIX_PRIVATE_KEY}"
        domain: "{{.Values.global.domain}}"
        traces:
          endpoint: "{{ .Values.global.traces.endpoint }}"
        metrics:
          endpoint: "{{ .Values.global.metrics.endpoint }}"
        logs:
          endpoint: "{{ .Values.global.logs.endpoint }}"
        application_name_attributes:
        - "k8s.namespace.name" 
        - "service.namespace"
        subsystem_name_attributes:
        - "k8s.deployment.name"
        - "k8s.statefulset.name"
        - "k8s.daemonset.name"
        - "k8s.cronjob.name"
        - "k8s.job.name"
        - "k8s.container.name"
        - "k8s.node.name"
        - "service.name"
        application_name: "{{.Values.global.defaultApplicationName }}"
        subsystem_name: "{{.Values.global.defaultSubsystemName }}"
    processors:
      k8sattributes:
        filter:
          node_from_env_var: KUBE_NODE_NAME     
        extract:
          metadata:
            - "k8s.namespace.name"
            - "k8s.deployment.name"
            - "k8s.statefulset.name"
            - "k8s.daemonset.name"
            - "k8s.cronjob.name"
            - "k8s.job.name"
            - "k8s.pod.name"
            - "k8s.node.name"
      memory_limiter: null # Will get the k8s resource limits
      resourcedetection/env:
        detectors: ["system","env"]
        timeout: 2s
        override: false
      spanmetrics:
        metrics_exporter: coralogix
        dimensions:
          - name: "k8s.deployment.name"
          - name: "k8s.statefulset.name"
          - name: "k8s.daemonset.name"
          - name: "k8s.cronjob.name"
          - name: "k8s.job.name"
          - name: "k8s.container.name"
          - name: "k8s.node.name"
          - name: "k8s.namespace.name" 
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${MY_POD_IP}:4317
          http:
            endpoint: ${MY_POD_IP}:4318
      zipkin:
        endpoint: ${MY_POD_IP}:9411
      jaeger:
        protocols:
          grpc:
            endpoint: ${MY_POD_IP}:14250
          thrift_http:
            endpoint: ${MY_POD_IP}:14268
          thrift_compact:
            endpoint: ${MY_POD_IP}:6831
          thrift_binary:
            endpoint: ${MY_POD_IP}:6832
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 30s
              static_configs:
                - targets:
                    - ${MY_POD_IP}:8888
    service:
      extensions:
      - zpages
      - pprof
      - health_check
      - memory_ballast
      telemetry:
        logs:
          encoding: json
        metrics:
          address: ${MY_POD_IP}:8888
      pipelines:
        traces:
          exporters:
            - coralogix
          processors:
            - memory_limiter
            - spanmetrics
            - batch
          receivers:
            - otlp
            - zipkin
            - jaeger
        metrics:
          exporters:
            - coralogix
          processors:
            - memory_limiter
            - resourcedetection/env
            - batch
          receivers:
            - prometheus
            - otlp
        logs:
          exporters:
            - coralogix
          processors:
            - batch
          receivers:
            - otlp
  tolerations: 
    - operator: Exists

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1
      memory: 2G

  ports:
    jaeger-binary:
      enabled: true
      containerPort: 6832
      servicePort: 6832
      hostPort: 6832
      protocol: TCP
    # In order to enable podMonitor, following part must be enabled in order to expose the required port:
    # metrics:
    #   enabled: true

  # podMonitor:
  #   enabled: true

  # prometheusRule:
  #   enabled: true
  #   defaultRules:
  #     enabled: true
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

  presets:
  # Configures the collector to collect logs.
  # Adds the filelog receiver to the logs pipeline
  # and adds the necessary volumes and volume mounts.
  # Best used with mode = daemonset.
  logsCollection:
    enabled: false
    includeCollectorLogs: false
    # Enabling this writes checkpoints in /var/lib/otelcol/ host directory.
    # Note this changes collector's user to root, so that it can write to host directory.
    storeCheckpoints: false
  # Configures the collector to collect host metrics.
  # Adds the hostmetrics receiver to the metrics pipeline
  # and adds the necessary volumes and volume mounts.
  # Best used with mode = daemonset.
  hostMetrics:
    enabled: false
  # Configures the Kubernetes Processor to add Kubernetes metadata.
  # Adds the k8sattributes processor to all the pipelines
  # and adds the necessary rules to ClusteRole.
  # Best used with mode = daemonset.
  kubernetesAttributes:
    enabled: false
  # Configures the collector to collect kubernetes events.
  # Adds the k8sobject receiver to the logs pipeline
  # and collects kubernetes events by default.
  # Best used with mode = deployment or statefulset.
  kubernetesEvents:
    enabled: false
  # Configures the Kubernetes Cluster Receiver to collect cluster-level metrics.
  # Adds the k8s_cluster receiver to the metrics pipeline
  # and adds the necessary rules to ClusteRole.
  # Best used with mode = deployment or statefulset.
  clusterMetrics:
    enabled: false
  # Configures the collector to collect Kubelet metrics.
  # Adds the kubeletstats receiver to the metrics pipeline
  # and adds the necessary rules to ClusteRole.
  # Best used with mode = daemonset.
  kubeletMetrics:
    enabled: false